%
% Time series analysis
% Assignment 
%
%

clear; 
close all;
% addpath('functions', '/data')         % Add this line to update the path
addpath('../functions', '../data')      % Add this line to update the path (Hanna)
%% 3. Modeling and validation for El-Geneina
clear
close all
clc

load proj23.mat
%% 3.1 Dividing and cleaning of data set
% Examine the data's stationarity
% Split into modelling, validation and test data

% Look at the data - deemed stationary!
figure(1)
plot(ElGeneina.nvdi_t,ElGeneina.nvdi)

% Split the data
n = length(ElGeneina.nvdi);

model = ElGeneina.nvdi(1:453,1);         % 70% for modelling
m_t = ElGeneina.nvdi_t(1:453,1);

valid = ElGeneina.nvdi(454:584,1);       % 20% for validation
v_t = ElGeneina.nvdi_t(454:584,1);

test = ElGeneina.nvdi(584:end,1);        % 10% for test
t_t = ElGeneina.nvdi_t(584:end,1); 

% Plot it
figure(2)
subplot(311)
plot(m_t,model);
title('Modeling set')
subplot(312)
plot(v_t,valid);
title('Validation set')
subplot(313)
plot(t_t,test);
title('Test set')

%% 3.1 Dividing and cleaning of data set
% Examine outliers in modeling set -> looks fine
close all
clc

% Plot the ACF and TACF to see if tail-values have an impact on
% distribution - is this wrong interpretation?
nbrLags = 100;
subplot(121)
acf(model, nbrLags, 0.02 ,1);
hold on
tacf(model, nbrLags, 0.02, 0.02 ,1);
hold off
title('ACF and TACF with alpha=0.02')

subplot(122)
acf(model, nbrLags, 0.01 ,1);
hold on
tacf(model, nbrLags, 0.01, 0.01 ,1);
hold off
title('ACF and TACF with alpha=0.01')

%%  3.1 Dividing and cleaning of data set
% Normalize the data based on model set parameters
close all
clc

max_m = max(model);
min_m = min(model);

m = 2*(model-min_m)/(max_m - min_m)-1;
v = 2*(valid-min_m)/(max_m - min_m)-1;
t = 2*(test-min_m)/(max_m - min_m)-1;

plot(m_t,m)
%%  3.2 Model B1 - NVDI prediction without external input
% Transformation of data 
close all; 
clc; 

checkIfNormal(m,'modelling data')
subplot(121)
lambda_B1 = bcNormPlot(m)
title('Box-Cox normality plot for modelling data')
fprintf(['The Box-Cox curve is maximized at %4.2f.\n'], lambda_B1)
subplot(122)
normplot(m)

% Lets try with the log of the data (option 1)
constant = abs(min(m))+1;
m_log = log(m+constant);
checkIfNormal(m_log,'modelling data');
figure();
plot(m_log);

%Lets try one over the square root of the data (option 2)
%constant = abs(min(m))+1;
%m_sqrt= 1./sqrt(m+constant);
%checkIfNormal(m_sqrt,'modelling data');
%figure();
%plot(m_sqrt);

% Much better -> Lets continue with m_trans 
v_log = log(v + constant);
t_log = log(t + constant);
%%  3.2 Model B1 - NVDI prediction without external input
% Differentiation of the data; 
clc; 

noLags = 50;                             % max up to N/4
plotACFnPACF(m_log,noLags, 'model data');

% Differentiate on season 36 with nabla (1-z^-36)
A36 = [1 zeros(1,35) -1];                % Sets the season
m_s = filter(A36,1,m_log);               % Filter on seasonality 36 
m_s = m_s(length(A36):end);              % Omit initial samples
data = iddata(m_s);                      % Create object for estimation
figure()
plot(m_s);
plotACFnPACF(m_s, noLags, "model data after differentiation with nabla36");  

% Differentiate on season 36 with (1-0.35*z^-36)
A36 = [1 zeros(1,35) -0.35];              % Sets the season
m_s = filter(A36,1,m_log);             % Filter on seasonality 36 
m_s = m_s(length(A36):end);              % Omit initial samples
data = iddata(m_s);                      % Create object for estimation
plotACFnPACF(m_s, noLags, "model data with a36 = ");  
figure()
plot(m_s);
%%  3.2 Model B1 - NVDI prediction without external input
Model the data 



%%

close all
m = 30;

% initial model, estimate a1, a2, a24 a25 26 
model_init = idpoly([1 zeros(1,26)] ,[] ,[1 zeros(1,23) 1]);       % Set up inital model
model_init.Structure.a.Free = [0 1 1 zeros(1,21) 1 1 1];
model_init.Structure.c.Free = [zeros(1,24) 1];

model_armax = pem(z,model_init);         % Estimate a1 and a2 
res = resid(model_armax, z);             % Create residual
basicPlot(res.y, m, "residual");             
present(model_armax);
whitenessTest(res.y);
%% 2. NVDI prediction without external input
% Start by plotting the data
close all
clc

basicPlot(m,100,'Modeling data')
checkIfNormal(m,'Modeling set','D',0.05);


m_d = myFilter([1 zeros(1,35) -0.7],1,m);

subplot(121)
plot(m)
title('Original data')
subplot(122)
plot(m_d)
title('Differentiated data')

basicPlot(m_d,50,'Differentiated data')


%% 3. NVDI prediction with external input


%% Create naive model 
